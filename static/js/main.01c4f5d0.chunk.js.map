{"version":3,"sources":["Algorithms/mergeSort.js","Algorithms/bubbleSort.js","Algorithms/quickSort.js","Algorithms/heapSort.js","SortingVisualizer/navBar.jsx","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxArray","slice","msHelper","mainArray","startIdx","endIdx","midIdx","Math","floor","k","i","j","push","mergeArrays","swap","temp","getQuickSortAnimations","quickSortHelper","pivotIdx","leftIdx","rightIdx","getHeapSortAnimations","currentIdx","siftDown","buildMaxHeap","heap","childOneIdx","childTwoIdx","idxToSwap","Topbar","props","useState","isOpen","setIsOpen","toggleButtonStatus","mergeSort","heapSort","quickSort","bubbleSort","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","Button","disabled","isDisabled","resetArray","NavItem","NavLink","outline","id","type","UncontrolledPopover","trigger","placement","target","PopoverHeader","PopoverBody","NavbarText","SortingVisualizer","state","callback","this","setState","setTimeout","min","max","random","isSorted","counter","getBubbleSortAnimations","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","backgroundColor","heightOne","heightTwo","height","newHeightOne","newHeightTwo","newHeight","Container","fluid","Row","Col","map","value","idx","key","width","display","margin","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.01c4f5d0.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxArray = array.slice();\n  msHelper(array, auxArray, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction msHelper(mainArray, auxArray, startIdx, endIdx, animations) {\n  if (startIdx === endIdx) return;\n  const midIdx = Math.floor((startIdx + endIdx) / 2);\n  msHelper(auxArray, mainArray, startIdx, midIdx, animations);\n  msHelper(auxArray, mainArray, midIdx + 1, endIdx, animations);\n  mergeArrays(mainArray, auxArray, startIdx, midIdx, endIdx, animations);\n}\n\nfunction mergeArrays(mainArray, auxArray, startIdx, midIdx, endIdx, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = midIdx + 1;\n  while (i <= midIdx && j <= endIdx) {\n    // i and j are the values being compared - their colors need to be changed\n    animations.push([i, j])\n    // push them again to revert their color\n    animations.push([i, j])\n    if (auxArray[i] <= auxArray[j]) {\n      animations.push([k, auxArray[i]]);\n      mainArray[k++] = auxArray[i++];\n    } else {\n      animations.push([k, auxArray[j]]);\n      mainArray[k++] = auxArray[j++];\n    }\n  }\n  while (i <= midIdx) {\n    animations.push([i, i])\n    animations.push([i, i])\n    animations.push([k, auxArray[i]])\n    mainArray[k++] = auxArray[i++];\n  }\n  while (j <= endIdx) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, auxArray[j]])\n    mainArray[k++] = auxArray[j++];\n  }\n}\n\n","export function getBubbleSortAnimations(array) {\n  const animations = [];\n  let isSorted = false;\n  let counter = 0\n  while (!isSorted) {\n    isSorted = true;\n    for (let i = 0; i < array.length - 1 - counter; i++) {\n      animations.push([i, i + 1])\n      animations.push([i, i + 1, \"revert\"])\n      if (array[i] > array[i + 1]) {\n        animations.push([i, array[i], i + 1, array[i + 1]])\n        swap(i, i + 1, array);\n        isSorted = false;\n      }\n    }\n    counter++;\n  }\n  return animations;\n}\n\nfunction swap(i, j, array) {\n  const temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}","export function getQuickSortAnimations(array) {\n  const animations = [];\n  quickSortHelper(array, 0, array.length - 1, animations);\n  return animations\n}\n\nfunction quickSortHelper(array, startIdx, endIdx, animations) {\n  if (startIdx >= endIdx) return;\n  let pivotIdx = startIdx;\n  let leftIdx = startIdx + 1\n  let rightIdx = endIdx;\n  while (rightIdx >= leftIdx) {\n    animations.push([leftIdx, rightIdx, \"color\"]);\n    animations.push([leftIdx, rightIdx, \"revert\"]);\n    animations.push([pivotIdx, \"color\"]);\n    animations.push([pivotIdx, \"revert\"]);\n    if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\n      animations.push([leftIdx, array[leftIdx], rightIdx, array[rightIdx]])\n      swap(leftIdx, rightIdx, array);\n    }\n    if (array[leftIdx] <= array[pivotIdx]) {\n      animations.push([leftIdx, pivotIdx, \"left\", \"pivot\", \"color\"]);      \n      animations.push([leftIdx, pivotIdx, \"left\", \"pivot\", \"revert\"]);\n      leftIdx++;\n    }\n    if (array[rightIdx] >= array[pivotIdx]) {\n      animations.push([rightIdx, pivotIdx, \"right\", \"pivot\", \"color\"]);      \n      animations.push([rightIdx, pivotIdx, \"right\", \"pivot\", \"revert\"]);\n      rightIdx--;\n    }\n  }\n  animations.push([pivotIdx, array[pivotIdx], rightIdx, array[rightIdx]])\n  swap(pivotIdx, rightIdx, array);\n  let leftSubarrayIsSmaller = rightIdx - 1 - startIdx < endIdx - rightIdx + 1;\n  if (leftSubarrayIsSmaller) {\n    quickSortHelper(array, startIdx, rightIdx - 1, animations);\n    quickSortHelper(array, rightIdx + 1, endIdx, animations);\n  } else {\n    quickSortHelper(array, rightIdx + 1, endIdx, animations);\n    quickSortHelper(array, startIdx, rightIdx - 1, animations);\n  }\n}\n\nfunction swap(i, j, array) {\n  const temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}","export function getHeapSortAnimations(array) {\n  const animations = [];\n  buildMaxHeap(array, animations);\n  for (let endIdx = array.length - 1; endIdx > 0; endIdx--) {\n    animations.push([0, endIdx, \"color\"])\n    animations.push([0, endIdx, \"revert\"])\n    animations.push([0, array[0], endIdx, array[endIdx]])\n    swap(0, endIdx, array);\n    siftDown(0, endIdx - 1, array, animations);\n  }\n  return animations;\n}\n\nfunction buildMaxHeap(array, animations) {\n  const firstParentIdx = Math.floor((array.length - 2) / 2);\n  for (let currentIdx = firstParentIdx; currentIdx >= 0; currentIdx--) {\n    siftDown(currentIdx, array.length - 1, array, animations);\n  }\n}\n\nfunction siftDown(currentIdx, endIdx, heap, animations) {\n  let childOneIdx = currentIdx * 2 + 1;\n  while (childOneIdx <= endIdx) {\n    const childTwoIdx = currentIdx * 2 + 2 <= endIdx ? currentIdx * 2 + 2 : - 1;\n    let idxToSwap;\n    if (childTwoIdx !== -1 && heap[childTwoIdx] > heap[childOneIdx]) {\n      idxToSwap = childTwoIdx;\n    } else {\n      idxToSwap = childOneIdx;\n    }\n    animations.push([currentIdx, idxToSwap, \"sift\", \"down\", \"color\"])\n    animations.push([currentIdx, idxToSwap, \"sift\", \"down\", \"revert\"])\n    if (heap[idxToSwap] > heap[currentIdx]) {\n      animations.push([currentIdx, heap[currentIdx], idxToSwap, heap[idxToSwap]])\n      swap(currentIdx, idxToSwap, heap);\n      currentIdx = idxToSwap;\n      childOneIdx = currentIdx * 2 + 1;\n    } else {\n      return;\n    }\n  }\n}\n\nfunction swap(i, j, array) {\n  const temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}","import React, { useState } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  NavbarText,\n  Button,\n  UncontrolledPopover, \n  PopoverHeader, \n  PopoverBody\n} from 'reactstrap';\n\nconst Topbar = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const toggle = () => setIsOpen(!isOpen);\n  const {toggleButtonStatus, mergeSort, heapSort, quickSort, bubbleSort} = props;\n\n\n  return (\n    <div>\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand href=\"/\">Sorting Algorithms Visualizer</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n            <Button disabled={props.isDisabled} color=\"secondary\" onClick={props.resetArray}>Generate New Array</Button >{' '}\n            <NavItem>\n              <NavLink disabled={props.isDisabled} href=\"#\" \n                onClick={() => {\n                  toggleButtonStatus(bubbleSort);\n                }}>\n              Bubble Sort</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink disabled={props.isDisabled} href=\"#\" \n                onClick={() => {\n                  toggleButtonStatus(quickSort);\n                }}>\n              Quick Sort</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink disabled={props.isDisabled} href=\"#\" \n                onClick={() => {\n                  toggleButtonStatus(heapSort);\n                }}>\n              Heap Sort</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink \n                disabled={props.isDisabled} \n                href=\"#\" \n                onClick={() => {\n                  toggleButtonStatus(mergeSort);\n                }}>\n              Merge Sort</NavLink>\n            </NavItem>\n\n            <Button outline color=\"info\" id=\"PopoverLegacy\" type=\"button\">\n              Complexity\n            </Button>\n            <UncontrolledPopover trigger=\"legacy\" placement=\"bottom\" target=\"PopoverLegacy\">\n              <PopoverHeader>Time & Space Complexity</PopoverHeader>\n              <PopoverBody>\n                Bubble sort time complexity is O(n^2) in worst case and O(n) in average and best. Space complexity is O(1). \n                Quick sort time complexity is O(n^2) in worst case and O(nlog(n)) in average and best. Space complexity is O(log(n)). \n                Heap Sort time coplexity is O(nlog(n)). Space complexity is O(1).\n                Merge Sort time complexity is O(nlog(n)). Space complexity is O(n). \n                *Note that complexity depends on implementation details. Refer to code in github to see how the above complexity was achieved for this visualization.\n              </PopoverBody>\n            </UncontrolledPopover>\n          </Nav>\n          <NavbarText>\n            <NavLink href=\"https://github.com/seungjin-kim/sorting-algorithms-visualizer\">GitHub</NavLink>\n          </NavbarText>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default Topbar;","import { Container, Row, Col } from 'reactstrap';\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './SortingVisualizer.css';\nimport {getMergeSortAnimations} from '../Algorithms/mergeSort.js'\nimport {getBubbleSortAnimations} from '../Algorithms/bubbleSort.js'\nimport {getQuickSortAnimations} from '../Algorithms/quickSort.js'\nimport {getHeapSortAnimations} from '../Algorithms/heapSort.js'\nimport Topbar from './navBar.jsx'\n\n\nconst MS_ANIMATION_SPEED = 2.5;\nconst NUM_OF_ARRAY_BARS = 140\nconst PRIMARY_COLOR = '#93aed2';\nconst SEC_COLOR = 'magenta';\nconst TER_COLOR = 'lime';\n// const SEC_COLOR = 'crimson';\n// const TER_COLOR = 'lime';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      isDisabled: false,\n    };\n  }\n\n  toggleButtonStatus(callback) {\n    this.setState({\n      isDisabled: true\n    });\n    \n    setTimeout(() => callback(), 100);\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUM_OF_ARRAY_BARS; i++) {\n      array.push(generateRandomInt(5, 680));\n    }\n    this.setState({array});\n  }\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      if (animations[i].length === 2) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SEC_COLOR;\n          barTwoStyle.backgroundColor = SEC_COLOR;\n        }, i * MS_ANIMATION_SPEED);\n      }\n\n      else if (animations[i].length === 3) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\n        }, i * MS_ANIMATION_SPEED);\n      }\n\n      else {\n        setTimeout(() => {\n          const [barOneIdx, heightOne, barTwoIdx, heightTwo] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          barOneStyle.height = `${heightTwo}px`;\n          barTwoStyle.height = `${heightOne}px`;\n        }, i * MS_ANIMATION_SPEED)\n      }\n    }\n\n    setTimeout(() => this.setState({\n      isDisabled: false\n    }), animations.length * MS_ANIMATION_SPEED);\n  }\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      if (animations[i].length === 2) {\n        // Color single pivot index\n        if (animations[i][1] === \"color\") {\n          const [barOneIdx] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = TER_COLOR;\n          }, i * MS_ANIMATION_SPEED);\n        }\n        // Revert color single pivot index\n        else {\n          const [barOneIdx] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\n          }, i * MS_ANIMATION_SPEED);\n        }\n      }\n      else if (animations[i].length === 3) {\n        // color left and right\n        if (animations[i][2] === \"color\") {\n          const [barOneIdx, barTwoIdx] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = SEC_COLOR;\n            barTwoStyle.backgroundColor = SEC_COLOR;\n          }, i * MS_ANIMATION_SPEED);\n        }\n        // revert color left and right\n        else {\n          const [barOneIdx, barTwoIdx] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\n            barTwoStyle.backgroundColor = PRIMARY_COLOR;\n          }, i * MS_ANIMATION_SPEED);\n        }\n      }\n      else if (animations[i].length === 5) {\n        // color left/right and pivot\n        if (animations[i][4] === \"color\") {\n          const [barOneIdx, barTwoIdx] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = SEC_COLOR;\n            barTwoStyle.backgroundColor = SEC_COLOR;\n          }, i * MS_ANIMATION_SPEED);\n        }\n        else {\n          const [barOneIdx, barTwoIdx] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\n            barTwoStyle.backgroundColor = PRIMARY_COLOR;\n          }, i * MS_ANIMATION_SPEED);\n        }\n      }\n      else {\n        setTimeout(() => {\n          const [barOneIdx, newHeightOne, barTwoIdx, newHeightTwo] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          barOneStyle.height = `${newHeightTwo}px`;\n          barTwoStyle.height = `${newHeightOne}px`;\n        }, i * MS_ANIMATION_SPEED);\n      }\n    }\n\n    setTimeout(() => this.setState({\n      isDisabled: false\n    }), animations.length * MS_ANIMATION_SPEED);\n  }\n\n  heapSort() {\n    const animations = getHeapSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      if (animations[i].length === 3) {\n        if (animations[i][2] === \"color\") {\n          const [barOneIdx, barTwoIdx] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = SEC_COLOR;\n            barTwoStyle.backgroundColor = SEC_COLOR;\n          }, i * MS_ANIMATION_SPEED);\n        }\n        else {\n          const [barOneIdx, barTwoIdx] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\n            barTwoStyle.backgroundColor = PRIMARY_COLOR;\n          }, i * MS_ANIMATION_SPEED);\n        }\n      }\n      else if (animations[i].length === 5) {\n        if (animations[i][4] === \"color\") {\n          const [barOneIdx, barTwoIdx] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = TER_COLOR;\n            barTwoStyle.backgroundColor = TER_COLOR;\n          }, i * MS_ANIMATION_SPEED);\n        }\n        else {\n          const [barOneIdx, barTwoIdx] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\n            barTwoStyle.backgroundColor = PRIMARY_COLOR;\n          }, i * MS_ANIMATION_SPEED);\n        }\n      }\n      else {\n        setTimeout(() => {\n          const [barOneIdx, newHeightOne, barTwoIdx, newHeightTwo] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          barOneStyle.height = `${newHeightTwo}px`;\n          barTwoStyle.height = `${newHeightOne}px`;\n        }, i * MS_ANIMATION_SPEED);\n      }\n    }\n\n    setTimeout(() => this.setState({\n      isDisabled: false\n    }), animations.length * MS_ANIMATION_SPEED);\n\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isChangeColor = i % 3 !== 2;\n      if (isChangeColor) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SEC_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * MS_ANIMATION_SPEED);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * MS_ANIMATION_SPEED)\n      }\n    }\n\n    setTimeout(() => this.setState({\n      isDisabled: false\n    }), animations.length * MS_ANIMATION_SPEED);\n\n  }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"main-container\" style={{backgroundColor:'#ededed'}}>\n        <Topbar \n          resetArray={() => this.resetArray()}\n          bubbleSort={() => this.bubbleSort()}\n          quickSort={() => this.quickSort()}\n          heapSort={() => this.heapSort()}\n          mergeSort={() => this.mergeSort()}\n          toggleButtonStatus={(callback) => this.toggleButtonStatus(callback)}\n          isDisabled={this.state.isDisabled}\n        />\n\n        <Container className=\"array-container\" fluid={true}>\n          <Row>\n            <Col>\n              {array.map((value, idx) => (\n                <div \n                  className=\"array-bar\"\n                  key={idx}\n                  style={{\n                    backgroundColor: PRIMARY_COLOR,\n                    height: `${value}px`,\n                    width: '4px',\n                    display: 'inline-block',\n                    margin: '0 1px',\n                  }}></div>\n              ))}\n\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\n// https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction generateRandomInt(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}